<?php
function quitarAcentos($text)
  {
    $text = htmlentities($text, ENT_QUOTES, 'UTF-8');
    $text = strtolower($text);
    $patron = array (
      // Espacios, puntos y comas por guion
      '/[\., ]+/' => '-',

      // Vocales
      '/&agrave;/' => 'a',
      '/&egrave;/' => 'e',
      '/&igrave;/' => 'i',
      '/&ograve;/' => 'o',
      '/&ugrave;/' => 'u',

      '/&aacute;/' => 'a',
      '/&eacute;/' => 'e',
      '/&iacute;/' => 'i',
      '/&oacute;/' => 'o',
      '/&uacute;/' => 'u',

      '/&acirc;/' => 'a',
      '/&ecirc;/' => 'e',
      '/&icirc;/' => 'i',
      '/&ocirc;/' => 'o',
      '/&ucirc;/' => 'u',

      '/&atilde;/' => 'a',
      '/&etilde;/' => 'e',
      '/&itilde;/' => 'i',
      '/&otilde;/' => 'o',
      '/&utilde;/' => 'u',

      '/&auml;/' => 'a',
      '/&euml;/' => 'e',
      '/&iuml;/' => 'i',
      '/&ouml;/' => 'o',
      '/&uuml;/' => 'u',

      '/&auml;/' => 'a',
      '/&euml;/' => 'e',
      '/&iuml;/' => 'i',
      '/&ouml;/' => 'o',
      '/&uuml;/' => 'u',

      // Otras letras y caracteres especiales
      '/&aring;/' => 'a',
      '/&ntilde;/' => 'n',

      // Agregar aqui mas caracteres si es necesario

    );

    $text = preg_replace(array_keys($patron),array_values($patron),$text);
    return $text;
}
function zbalcon_webform_submission_presave($node, &$submission) {
  foreach ($node->webform['components'] as $cid=>$component) {
    if ($component['type'] == 'serial') {
      if ($component['form_key'] == 'id_tarjeta') {
        $idtarjeta = $submission->data[$cid]['value'][0];
        $idtarjeta = str_pad($idtarjeta ,5,"0",STR_PAD_LEFT);
          variable_set('id_tarjeta', $idtarjeta);
    }
   }
    if ($component['type'] == 'file') {
      if ($component['form_key'] == 'foto') {
        $numfoto = $submission->data[$cid]['value'][0];
        $submission->data[$cid]['value'][0] = $numfoto;
    }
   }
    if ($component['type'] == 'textfield') {
      if ($component['form_key'] == 'nombre') {
        $texto = strtoupper($submission->data[$cid]['value'][0]);
        $submission->data[$cid]['value'][0] = $texto;
        variable_set('nombre_tarjeta', $texto);
    }
   }
  }
}
function zbalcon_file_update($new_file) {
  if (!$new_file->fid) {
    //Nothing to do if no fileid
    return;
  }
  $nombre_archivo = (string)variable_get('id_tarjeta').'_'.variable_get('nombre_tarjeta');
  variable_del('id_tarjeta');
  variable_del('nombre_tarjeta');
  $nombre_archivo = str_replace(' ','_',$nombre_archivo);
  $nombre_archivo = quitarAcentos($nombre_archivo);
  $nombre_antiguo = substr($new_file->filename,0,strlen($new_file->filename)-4);
  $new_filename = $nombre_archivo.substr($new_file->filename,strlen($new_file->filename)-4,4);
  $desired_destination = preg_replace('/_[0-9]+\.(.*)$/', '.$1', $new_file->uri);
  $desired_destination = str_replace($nombre_antiguo, $nombre_archivo, $desired_destination);
  $db_path = db_select('file_managed', 'f')
    ->fields('f', array('uri', ))
    ->condition('fid', $new_file->fid)
    ->execute()
    ->fetchField();
  if ($db_path != $new_file->uri) {
    //this happens when a reversion is being reverted
    $next_good_filepath = file_destination($desired_destination, FILE_EXISTS_RENAME);
    db_update('file_managed')
      ->fields(array('uri' => $next_good_filepath))
      ->condition('fid', $new_file->fid)
      ->execute();
    $new_file->uri = $desired_destination;
  }
  else {
    //If the filename has be modified by adding a _0 value, or
    //on certain situations the filepath will not match the filepath in the db, such as
    //when reverting a revision.  When reverting a revision change the filename as well
    if (!strpos($new_file->uri, $new_file->uri)) {
      //the filename is not in the filepath, so drupal must have added a "_0" before the extension
      //find the file that is blocking this file from keeping the correct path
      $result = db_select('file_managed', 'f')
        ->fields('f')
        ->condition('uri', $desired_destination)
        ->execute();
      //@todo only one result is handled, should allow for multiple results
      $is_blocked = false;

      foreach ($result as $file) {
        $is_blocked = TRUE;
        $blocking_file = $file;
        $tmp_destination = file_directory_temp() ."/$blocking_file->filename";
      }

      $old_destination = $db_path;
      //$old_filename = $blocking_file->filename;

      if ($old_destination == $desired_destination){
        return;
      }
      //Swap the files
      if ($is_blocked) {
        //move the blocking file to a temporary location
        if (!file_unmanaged_move($desired_destination, $tmp_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $desired_destination, '%new' => $tmp_destination)), 'error');
          return;
        }
        //DRUPAL 7 no longer changes the source filepath during move
        //move blocking file was successful, update the DB
        db_update('file_managed')
          ->fields(array('uri' => $tmp_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }


      //move the newfile to the prefered location
      if (!file_unmanaged_move($old_destination, $desired_destination)) {
        drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $old_destination, '%new' => $desired_destination)), 'error');
        return;
      }
      //move newfile was successful, update the DB
      db_update('file_managed')
        ->fields(array('uri' => $desired_destination, 'filename' => $new_filename))
        ->condition('fid', $new_file->fid)
        ->execute();
      $new_file->uri = $desired_destination;//set the newfile's path to the correct path


      if ($is_blocked) {
        //move the older file from temp to the new _0 location
        if (!file_unmanaged_move($tmp_destination, $old_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $tmp_destination, '%new' => $old_destination)), 'error');
          return;
        }
        //move blocking file was successful, update the DB with the actual location after file copy, so we use tmp_destination as it was updated during the move
        db_update('file_managed')
          ->fields(array('uri' => $old_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }
    }
  }
  //Have to clear the cache because the revision data is cached somewhere
  /*
   * Find the nids where this file is used
  $query = "SELECT DISTINCT nid FROM {files} WHERE fid=%d";
  $result = db_query($query, $new_file->fid);
  while($data = db_fetch_object($result)) {
    cache_clear_all("content:$data->nid");
  }
  */
  //This is inefficent, but how can we determine what nodes use this file?
 // cache_clear_all('*', 'cache_content', TRUE);
}

/**
 * @}
 */
